// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ResourceGroups.
    /// </summary>
    public static partial class ResourceGroupsExtensions
    {
            /// <summary>
            /// Checks whether a resource group exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to check. The name is case insensitive.
            /// </param>
            public static void CheckExistence(this IResourceGroups operations, string resourceGroupName)
            {
                operations.CheckExistenceAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks whether a resource group exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to check. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckExistenceAsync(this IResourceGroups operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CheckExistenceWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to create or update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update a resource group.
            /// </param>
            public static ResourceGroup CreateOrUpdate(this IResourceGroups operations, string resourceGroupName, ResourceGroup parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to create or update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update a resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceGroup> CreateOrUpdateAsync(this IResourceGroups operations, string resourceGroupName, ResourceGroup parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a resource group.
            /// </summary>
            /// <remarks>
            /// When you delete a resource group, all of its resources are also deleted.
            /// Deleting a resource group deletes all of its template deployments and
            /// currently stored operations.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to delete. The name is case insensitive.
            /// </param>
            public static void Delete(this IResourceGroups operations, string resourceGroupName)
            {
                operations.DeleteAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a resource group.
            /// </summary>
            /// <remarks>
            /// When you delete a resource group, all of its resources are also deleted.
            /// Deleting a resource group deletes all of its template deployments and
            /// currently stored operations.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to delete. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IResourceGroups operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            public static ResourceGroup Get(this IResourceGroups operations, string resourceGroupName)
            {
                return operations.GetAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to get. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceGroup> GetAsync(this IResourceGroups operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a resource group.
            /// </summary>
            /// <remarks>
            /// Resource groups can be updated through a simple PATCH operation to a group
            /// address. The format of the request is the same as that for creating a
            /// resource group. If a field is unspecified, the current value is retained.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to update. The name is case insensitive.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a resource group.
            /// </param>
            public static ResourceGroup Update(this IResourceGroups operations, string resourceGroupName, ResourceGroupPatchable parameters)
            {
                return operations.UpdateAsync(resourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a resource group.
            /// </summary>
            /// <remarks>
            /// Resource groups can be updated through a simple PATCH operation to a group
            /// address. The format of the request is the same as that for creating a
            /// resource group. If a field is unspecified, the current value is retained.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to update. The name is case insensitive.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update a resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceGroup> UpdateAsync(this IResourceGroups operations, string resourceGroupName, ResourceGroupPatchable parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Captures the specified resource group as a template.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to export as a template.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for exporting the template.
            /// </param>
            public static ResourceGroupExportResult ExportTemplate(this IResourceGroups operations, string resourceGroupName, ExportTemplateRequest parameters)
            {
                return operations.ExportTemplateAsync(resourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Captures the specified resource group as a template.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to export as a template.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for exporting the template.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceGroupExportResult> ExportTemplateAsync(this IResourceGroups operations, string resourceGroupName, ExportTemplateRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportTemplateWithHttpMessagesAsync(resourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the resource groups for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// The number of results to return. If null is passed, returns all resource
            /// groups.
            /// </param>
            public static ResourceGroupListResult List(this IResourceGroups operations, string filter = default(string), int? top = default(int?))
            {
                return operations.ListAsync(filter, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the resource groups for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// The number of results to return. If null is passed, returns all resource
            /// groups.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceGroupListResult> ListAsync(this IResourceGroups operations, string filter = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
