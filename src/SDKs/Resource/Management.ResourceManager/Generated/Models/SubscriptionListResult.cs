// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Subscription list operation response.
    /// </summary>
    public partial class SubscriptionListResult
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionListResult class.
        /// </summary>
        public SubscriptionListResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubscriptionListResult class.
        /// </summary>
        /// <param name="nextLink">The URL to get the next set of
        /// results.</param>
        /// <param name="value">An array of subscriptions.</param>
        public SubscriptionListResult(string nextLink, IList<Subscription> value = default(IList<Subscription>))
        {
            Value = value;
            NextLink = nextLink;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an array of subscriptions.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<Subscription> Value { get; set; }

        /// <summary>
        /// Gets or sets the URL to get the next set of results.
        /// </summary>
        [JsonProperty(PropertyName = "nextLink")]
        public string NextLink { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NextLink == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NextLink");
            }
        }
    }
}
