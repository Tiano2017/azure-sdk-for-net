// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Resources.
    /// </summary>
    public static partial class ResourcesExtensions
    {
            /// <summary>
            /// Get all the resources for a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group with the resources to get.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='expand'>
            /// The $expand query parameter
            /// </param>
            /// <param name='top'>
            /// The number of results to return. If null is passed, returns all resources.
            /// </param>
            public static ResourceListResult ListByResourceGroup(this IResources operations, string resourceGroupName, string filter = default(string), string expand = default(string), int? top = default(int?))
            {
                return operations.ListByResourceGroupAsync(resourceGroupName, filter, expand, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the resources for a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group with the resources to get.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='expand'>
            /// The $expand query parameter
            /// </param>
            /// <param name='top'>
            /// The number of results to return. If null is passed, returns all resources.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListResult> ListByResourceGroupAsync(this IResources operations, string resourceGroupName, string filter = default(string), string expand = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, filter, expand, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Moves resources from one resource group to another resource group.
            /// </summary>
            /// <remarks>
            /// The resources to move must be in the same source resource group. The target
            /// resource group may be in a different subscription. When moving resources,
            /// both the source group and the target group are locked for the duration of
            /// the operation. Write and delete operations are blocked on the groups until
            /// the move completes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourceResourceGroupName'>
            /// The name of the resource group containing the resources to move.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for moving resources.
            /// </param>
            public static void MoveResources(this IResources operations, string sourceResourceGroupName, ResourcesMoveInfo parameters)
            {
                operations.MoveResourcesAsync(sourceResourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Moves resources from one resource group to another resource group.
            /// </summary>
            /// <remarks>
            /// The resources to move must be in the same source resource group. The target
            /// resource group may be in a different subscription. When moving resources,
            /// both the source group and the target group are locked for the duration of
            /// the operation. Write and delete operations are blocked on the groups until
            /// the move completes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourceResourceGroupName'>
            /// The name of the resource group containing the resources to move.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for moving resources.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task MoveResourcesAsync(this IResources operations, string sourceResourceGroupName, ResourcesMoveInfo parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.MoveResourcesWithHttpMessagesAsync(sourceResourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Validates whether resources can be moved from one resource group to another
            /// resource group.
            /// </summary>
            /// <remarks>
            /// This operation checks whether the specified resources can be moved to the
            /// target. The resources to move must be in the same source resource group.
            /// The target resource group may be in a different subscription. If validation
            /// succeeds, it returns HTTP response code 204 (no content). If validation
            /// fails, it returns HTTP response code 409 (Conflict) with an error message.
            /// Retrieve the URL in the Location header value to check the result of the
            /// long-running operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourceResourceGroupName'>
            /// The name of the resource group containing the resources to validate for
            /// move.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for moving resources.
            /// </param>
            public static void ValidateMoveResources(this IResources operations, string sourceResourceGroupName, ResourcesMoveInfo parameters)
            {
                operations.ValidateMoveResourcesAsync(sourceResourceGroupName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates whether resources can be moved from one resource group to another
            /// resource group.
            /// </summary>
            /// <remarks>
            /// This operation checks whether the specified resources can be moved to the
            /// target. The resources to move must be in the same source resource group.
            /// The target resource group may be in a different subscription. If validation
            /// succeeds, it returns HTTP response code 204 (no content). If validation
            /// fails, it returns HTTP response code 409 (Conflict) with an error message.
            /// Retrieve the URL in the Location header value to check the result of the
            /// long-running operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sourceResourceGroupName'>
            /// The name of the resource group containing the resources to validate for
            /// move.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for moving resources.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ValidateMoveResourcesAsync(this IResources operations, string sourceResourceGroupName, ResourcesMoveInfo parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ValidateMoveResourcesWithHttpMessagesAsync(sourceResourceGroupName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all the resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='expand'>
            /// The $expand query parameter.
            /// </param>
            /// <param name='top'>
            /// The number of results to return. If null is passed, returns all resource
            /// groups.
            /// </param>
            public static ResourceListResult List(this IResources operations, string filter = default(string), string expand = default(string), int? top = default(int?))
            {
                return operations.ListAsync(filter, expand, top).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the resources in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='expand'>
            /// The $expand query parameter.
            /// </param>
            /// <param name='top'>
            /// The number of results to return. If null is passed, returns all resource
            /// groups.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListResult> ListAsync(this IResources operations, string filter = default(string), string expand = default(string), int? top = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(filter, expand, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks whether a resource exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource to check. The name
            /// is case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The resource provider of the resource to check.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to check whether it exists.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            public static void CheckExistence(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion)
            {
                operations.CheckExistenceAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks whether a resource exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource to check. The name
            /// is case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The resource provider of the resource to check.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to check whether it exists.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckExistenceAsync(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CheckExistenceWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource to delete. The
            /// name is case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to delete.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            public static void Delete(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion)
            {
                operations.DeleteAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the resource to delete. The
            /// name is case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to delete.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group for the resource. The name is case
            /// insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource to create.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to create.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating or updating the resource.
            /// </param>
            public static GenericResource CreateOrUpdate(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion, GenericResource parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group for the resource. The name is case
            /// insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource to create.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to create.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating or updating the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GenericResource> CreateOrUpdateAsync(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion, GenericResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group for the resource. The name is case
            /// insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource to update.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to update.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for updating the resource.
            /// </param>
            public static GenericResource Update(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion, GenericResource parameters)
            {
                return operations.UpdateAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group for the resource. The name is case
            /// insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource to update.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to update.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for updating the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GenericResource> UpdateAsync(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion, GenericResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource to get. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to get.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            public static GenericResource Get(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion)
            {
                return operations.GetAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource to get. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to get.
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GenericResource> GetAsync(this IResources operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks by ID whether a resource exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            public static void CheckExistenceById(this IResources operations, string resourceId, string apiVersion)
            {
                operations.CheckExistenceByIdAsync(resourceId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks by ID whether a resource exists.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CheckExistenceByIdAsync(this IResources operations, string resourceId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CheckExistenceByIdWithHttpMessagesAsync(resourceId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Deletes a resource by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            public static void DeleteById(this IResources operations, string resourceId, string apiVersion)
            {
                operations.DeleteByIdAsync(resourceId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a resource by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByIdAsync(this IResources operations, string resourceId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByIdWithHttpMessagesAsync(resourceId, apiVersion, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create a resource by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='parameters'>
            /// Create or update resource parameters.
            /// </param>
            public static GenericResource CreateOrUpdateById(this IResources operations, string resourceId, string apiVersion, GenericResource parameters)
            {
                return operations.CreateOrUpdateByIdAsync(resourceId, apiVersion, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a resource by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='parameters'>
            /// Create or update resource parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GenericResource> CreateOrUpdateByIdAsync(this IResources operations, string resourceId, string apiVersion, GenericResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateByIdWithHttpMessagesAsync(resourceId, apiVersion, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a resource by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='parameters'>
            /// Update resource parameters.
            /// </param>
            public static GenericResource UpdateById(this IResources operations, string resourceId, string apiVersion, GenericResource parameters)
            {
                return operations.UpdateByIdAsync(resourceId, apiVersion, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a resource by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='parameters'>
            /// Update resource parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GenericResource> UpdateByIdAsync(this IResources operations, string resourceId, string apiVersion, GenericResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateByIdWithHttpMessagesAsync(resourceId, apiVersion, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a resource by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            public static GenericResource GetById(this IResources operations, string resourceId, string apiVersion)
            {
                return operations.GetByIdAsync(resourceId, apiVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a resource by ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceId'>
            /// The fully qualified ID of the resource, including the resource name and
            /// resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/{resource-provider-namespace}/{resource-type}/{resource-name}
            /// </param>
            /// <param name='apiVersion'>
            /// The API version to use for the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GenericResource> GetByIdAsync(this IResources operations, string resourceId, string apiVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(resourceId, apiVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
