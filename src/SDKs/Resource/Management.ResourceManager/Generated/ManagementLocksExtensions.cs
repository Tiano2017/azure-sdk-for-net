// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ManagementLocks.
    /// </summary>
    public static partial class ManagementLocksExtensions
    {
            /// <summary>
            /// Creates or updates a management lock at the resource group level.
            /// </summary>
            /// <remarks>
            /// When you apply a lock at a parent scope, all child resources inherit the
            /// same lock. To create management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to lock.
            /// </param>
            /// <param name='lockName'>
            /// The lock name. The lock name can be a maximum of 260 characters. It cannot
            /// contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
            /// </param>
            /// <param name='parameters'>
            /// The management lock parameters.
            /// </param>
            public static ManagementLockObject CreateOrUpdateAtResourceGroupLevel(this IManagementLocks operations, string resourceGroupName, string lockName, ManagementLockObject parameters)
            {
                return operations.CreateOrUpdateAtResourceGroupLevelAsync(resourceGroupName, lockName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a management lock at the resource group level.
            /// </summary>
            /// <remarks>
            /// When you apply a lock at a parent scope, all child resources inherit the
            /// same lock. To create management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group to lock.
            /// </param>
            /// <param name='lockName'>
            /// The lock name. The lock name can be a maximum of 260 characters. It cannot
            /// contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
            /// </param>
            /// <param name='parameters'>
            /// The management lock parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockObject> CreateOrUpdateAtResourceGroupLevelAsync(this IManagementLocks operations, string resourceGroupName, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, lockName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a management lock at the resource group level.
            /// </summary>
            /// <remarks>
            /// To delete management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the lock.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock to delete.
            /// </param>
            public static void DeleteAtResourceGroupLevel(this IManagementLocks operations, string resourceGroupName, string lockName)
            {
                operations.DeleteAtResourceGroupLevelAsync(resourceGroupName, lockName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a management lock at the resource group level.
            /// </summary>
            /// <remarks>
            /// To delete management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the lock.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtResourceGroupLevelAsync(this IManagementLocks operations, string resourceGroupName, string lockName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, lockName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a management lock at the resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the locked resource group.
            /// </param>
            /// <param name='lockName'>
            /// The name of the lock to get.
            /// </param>
            public static ManagementLockObject GetAtResourceGroupLevel(this IManagementLocks operations, string resourceGroupName, string lockName)
            {
                return operations.GetAtResourceGroupLevelAsync(resourceGroupName, lockName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a management lock at the resource group level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the locked resource group.
            /// </param>
            /// <param name='lockName'>
            /// The name of the lock to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockObject> GetAtResourceGroupLevelAsync(this IManagementLocks operations, string resourceGroupName, string lockName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, lockName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a management lock by scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope for the lock. When providing a scope for the assignment, use
            /// '/subscriptions/{subscriptionId}' for subscriptions,
            /// '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for
            /// resource groups, and
            /// '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
            /// for resources.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock.
            /// </param>
            /// <param name='parameters'>
            /// Create or update management lock parameters.
            /// </param>
            public static ManagementLockObject CreateOrUpdateByScope(this IManagementLocks operations, string scope, string lockName, ManagementLockObject parameters)
            {
                return operations.CreateOrUpdateByScopeAsync(scope, lockName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a management lock by scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope for the lock. When providing a scope for the assignment, use
            /// '/subscriptions/{subscriptionId}' for subscriptions,
            /// '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}' for
            /// resource groups, and
            /// '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}'
            /// for resources.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock.
            /// </param>
            /// <param name='parameters'>
            /// Create or update management lock parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockObject> CreateOrUpdateByScopeAsync(this IManagementLocks operations, string scope, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateByScopeWithHttpMessagesAsync(scope, lockName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a management lock by scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope for the lock.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock.
            /// </param>
            public static void DeleteByScope(this IManagementLocks operations, string scope, string lockName)
            {
                operations.DeleteByScopeAsync(scope, lockName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a management lock by scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope for the lock.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteByScopeAsync(this IManagementLocks operations, string scope, string lockName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteByScopeWithHttpMessagesAsync(scope, lockName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a management lock by scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope for the lock.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock.
            /// </param>
            public static ManagementLockObject GetByScope(this IManagementLocks operations, string scope, string lockName)
            {
                return operations.GetByScopeAsync(scope, lockName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a management lock by scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope for the lock.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockObject> GetByScopeAsync(this IManagementLocks operations, string scope, string lockName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByScopeWithHttpMessagesAsync(scope, lockName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a management lock at the resource level or any level
            /// below the resource.
            /// </summary>
            /// <remarks>
            /// When you apply a lock at a parent scope, all child resources inherit the
            /// same lock. To create management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource to lock.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The resource provider namespace of the resource to lock.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource to lock.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to lock.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock. The lock name can be a maximum of 260 characters. It
            /// cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating or updating a  management lock.
            /// </param>
            public static ManagementLockObject CreateOrUpdateAtResourceLevel(this IManagementLocks operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, ManagementLockObject parameters)
            {
                return operations.CreateOrUpdateAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a management lock at the resource level or any level
            /// below the resource.
            /// </summary>
            /// <remarks>
            /// When you apply a lock at a parent scope, all child resources inherit the
            /// same lock. To create management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource to lock.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The resource provider namespace of the resource to lock.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource to lock.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource to lock.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock. The lock name can be a maximum of 260 characters. It
            /// cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating or updating a  management lock.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockObject> CreateOrUpdateAtResourceLevelAsync(this IManagementLocks operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtResourceLevelWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the management lock of a resource or any level below the resource.
            /// </summary>
            /// <remarks>
            /// To delete management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource with the lock to
            /// delete.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The resource provider namespace of the resource with the lock to delete.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource with the lock to delete.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource with the lock to delete.
            /// </param>
            /// <param name='lockName'>
            /// The name of the lock to delete.
            /// </param>
            public static void DeleteAtResourceLevel(this IManagementLocks operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName)
            {
                operations.DeleteAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the management lock of a resource or any level below the resource.
            /// </summary>
            /// <remarks>
            /// To delete management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the resource with the lock to
            /// delete.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The resource provider namespace of the resource with the lock to delete.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the resource with the lock to delete.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource with the lock to delete.
            /// </param>
            /// <param name='lockName'>
            /// The name of the lock to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtResourceLevelAsync(this IManagementLocks operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtResourceLevelWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the management lock of a resource or any level below resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// An extra path parameter needed in some services, like SQL Databases.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock.
            /// </param>
            public static ManagementLockObject GetAtResourceLevel(this IManagementLocks operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName)
            {
                return operations.GetAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the management lock of a resource or any level below resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// An extra path parameter needed in some services, like SQL Databases.
            /// </param>
            /// <param name='resourceType'>
            /// The type of the resource.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the resource.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockObject> GetAtResourceLevelAsync(this IManagementLocks operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string lockName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtResourceLevelWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, lockName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a management lock at the subscription level.
            /// </summary>
            /// <remarks>
            /// When you apply a lock at a parent scope, all child resources inherit the
            /// same lock. To create management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock. The lock name can be a maximum of 260 characters. It
            /// cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
            /// </param>
            /// <param name='parameters'>
            /// The management lock parameters.
            /// </param>
            public static ManagementLockObject CreateOrUpdateAtSubscriptionLevel(this IManagementLocks operations, string lockName, ManagementLockObject parameters)
            {
                return operations.CreateOrUpdateAtSubscriptionLevelAsync(lockName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a management lock at the subscription level.
            /// </summary>
            /// <remarks>
            /// When you apply a lock at a parent scope, all child resources inherit the
            /// same lock. To create management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock. The lock name can be a maximum of 260 characters. It
            /// cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
            /// </param>
            /// <param name='parameters'>
            /// The management lock parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockObject> CreateOrUpdateAtSubscriptionLevelAsync(this IManagementLocks operations, string lockName, ManagementLockObject parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateAtSubscriptionLevelWithHttpMessagesAsync(lockName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the management lock at the subscription level.
            /// </summary>
            /// <remarks>
            /// To delete management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock to delete.
            /// </param>
            public static void DeleteAtSubscriptionLevel(this IManagementLocks operations, string lockName)
            {
                operations.DeleteAtSubscriptionLevelAsync(lockName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the management lock at the subscription level.
            /// </summary>
            /// <remarks>
            /// To delete management locks, you must have access to
            /// Microsoft.Authorization/* or Microsoft.Authorization/locks/* actions. Of
            /// the built-in roles, only Owner and User Access Administrator are granted
            /// those actions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lockName'>
            /// The name of lock to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAtSubscriptionLevelAsync(this IManagementLocks operations, string lockName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAtSubscriptionLevelWithHttpMessagesAsync(lockName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets a management lock at the subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lockName'>
            /// The name of the lock to get.
            /// </param>
            public static ManagementLockObject GetAtSubscriptionLevel(this IManagementLocks operations, string lockName)
            {
                return operations.GetAtSubscriptionLevelAsync(lockName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a management lock at the subscription level.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lockName'>
            /// The name of the lock to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockObject> GetAtSubscriptionLevelAsync(this IManagementLocks operations, string lockName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAtSubscriptionLevelWithHttpMessagesAsync(lockName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the management locks for a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the locks to get.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            public static ManagementLockListResult ListAtResourceGroupLevel(this IManagementLocks operations, string resourceGroupName, string filter = default(string))
            {
                return operations.ListAtResourceGroupLevelAsync(resourceGroupName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the management locks for a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the locks to get.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockListResult> ListAtResourceGroupLevelAsync(this IManagementLocks operations, string resourceGroupName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceGroupLevelWithHttpMessagesAsync(resourceGroupName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the management locks for a resource or any level below resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the locked resource. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the locked resource.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the locked resource.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            public static ManagementLockListResult ListAtResourceLevel(this IManagementLocks operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = default(string))
            {
                return operations.ListAtResourceLevelAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the management locks for a resource or any level below resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group containing the locked resource. The name is
            /// case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='parentResourcePath'>
            /// The parent resource identity.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type of the locked resource.
            /// </param>
            /// <param name='resourceName'>
            /// The name of the locked resource.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockListResult> ListAtResourceLevelAsync(this IManagementLocks operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtResourceLevelWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the management locks for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            public static ManagementLockListResult ListAtSubscriptionLevel(this IManagementLocks operations, string filter = default(string))
            {
                return operations.ListAtSubscriptionLevelAsync(filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the management locks for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ManagementLockListResult> ListAtSubscriptionLevelAsync(this IManagementLocks operations, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionLevelWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
