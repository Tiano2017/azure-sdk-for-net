// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ResourceLinks.
    /// </summary>
    public static partial class ResourceLinksExtensions
    {
            /// <summary>
            /// Deletes a resource link with the specified ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linkId'>
            /// The fully qualified ID of the resource link. Use the format,
            /// /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
            /// For example,
            /// /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
            /// </param>
            public static void Delete(this IResourceLinks operations, string linkId)
            {
                operations.DeleteAsync(linkId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a resource link with the specified ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linkId'>
            /// The fully qualified ID of the resource link. Use the format,
            /// /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
            /// For example,
            /// /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IResourceLinks operations, string linkId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(linkId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates or updates a resource link between the specified resources.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linkId'>
            /// The fully qualified ID of the resource link. Use the format,
            /// /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
            /// For example,
            /// /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating or updating a resource link.
            /// </param>
            public static ResourceLink CreateOrUpdate(this IResourceLinks operations, string linkId, ResourceLink parameters)
            {
                return operations.CreateOrUpdateAsync(linkId, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a resource link between the specified resources.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linkId'>
            /// The fully qualified ID of the resource link. Use the format,
            /// /subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/{provider-namespace}/{resource-type}/{resource-name}/Microsoft.Resources/links/{link-name}.
            /// For example,
            /// /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
            /// </param>
            /// <param name='parameters'>
            /// Parameters for creating or updating a resource link.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceLink> CreateOrUpdateAsync(this IResourceLinks operations, string linkId, ResourceLink parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(linkId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a resource link with the specified ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linkId'>
            /// The fully qualified Id of the resource link. For example,
            /// /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
            /// </param>
            public static ResourceLink Get(this IResourceLinks operations, string linkId)
            {
                return operations.GetAsync(linkId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a resource link with the specified ID.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linkId'>
            /// The fully qualified Id of the resource link. For example,
            /// /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup/Microsoft.Web/sites/mySite/Microsoft.Resources/links/myLink
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceLink> GetAsync(this IResourceLinks operations, string linkId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(linkId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the linked resources for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list resource links operation. The supported
            /// filter for list resource links is targetid. For example, $filter=targetid
            /// eq {value}
            /// </param>
            public static ResourceLinkResult ListAtSubscription(this IResourceLinks operations, string filter = default(string))
            {
                return operations.ListAtSubscriptionAsync(filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the linked resources for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the list resource links operation. The supported
            /// filter for list resource links is targetid. For example, $filter=targetid
            /// eq {value}
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceLinkResult> ListAtSubscriptionAsync(this IResourceLinks operations, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSubscriptionWithHttpMessagesAsync(filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of resource links at and below the specified source scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The fully qualified ID of the scope for getting the resource links. For
            /// example, to list resource links at and under a resource group, set the
            /// scope to
            /// /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply when getting resource links. To get links only at the
            /// specified scope (not below the scope), use Filter.atScope(). Possible
            /// values include: 'atScope()'
            /// </param>
            public static ResourceLinkResult ListAtSourceScope(this IResourceLinks operations, string scope, Filter? filter = default(Filter?))
            {
                return operations.ListAtSourceScopeAsync(scope, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of resource links at and below the specified source scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The fully qualified ID of the scope for getting the resource links. For
            /// example, to list resource links at and under a resource group, set the
            /// scope to
            /// /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup.
            /// </param>
            /// <param name='filter'>
            /// The filter to apply when getting resource links. To get links only at the
            /// specified scope (not below the scope), use Filter.atScope(). Possible
            /// values include: 'atScope()'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceLinkResult> ListAtSourceScopeAsync(this IResourceLinks operations, string scope, Filter? filter = default(Filter?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAtSourceScopeWithHttpMessagesAsync(scope, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
