// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ResourceManager
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Providers.
    /// </summary>
    public static partial class ProvidersExtensions
    {
            /// <summary>
            /// Unregisters a subscription from a resource provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider to unregister.
            /// </param>
            public static Provider Unregister(this IProviders operations, string resourceProviderNamespace)
            {
                return operations.UnregisterAsync(resourceProviderNamespace).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unregisters a subscription from a resource provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider to unregister.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Provider> UnregisterAsync(this IProviders operations, string resourceProviderNamespace, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnregisterWithHttpMessagesAsync(resourceProviderNamespace, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Registers a subscription with a resource provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider to register.
            /// </param>
            public static Provider Register(this IProviders operations, string resourceProviderNamespace)
            {
                return operations.RegisterAsync(resourceProviderNamespace).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Registers a subscription with a resource provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider to register.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Provider> RegisterAsync(this IProviders operations, string resourceProviderNamespace, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegisterWithHttpMessagesAsync(resourceProviderNamespace, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all resource providers for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// The number of results to return. If null is passed returns all deployments.
            /// </param>
            /// <param name='expand'>
            /// The properties to include in the results. For example, use
            /// &amp;$expand=metadata in the query string to retrieve resource provider
            /// metadata. To include property aliases in response, use
            /// $expand=resourceTypes/aliases.
            /// </param>
            public static ProviderListResult List(this IProviders operations, int? top = default(int?), string expand = default(string))
            {
                return operations.ListAsync(top, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all resource providers for a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='top'>
            /// The number of results to return. If null is passed returns all deployments.
            /// </param>
            /// <param name='expand'>
            /// The properties to include in the results. For example, use
            /// &amp;$expand=metadata in the query string to retrieve resource provider
            /// metadata. To include property aliases in response, use
            /// $expand=resourceTypes/aliases.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderListResult> ListAsync(this IProviders operations, int? top = default(int?), string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(top, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified resource provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='expand'>
            /// The $expand query parameter. For example, to include property aliases in
            /// response, use $expand=resourceTypes/aliases.
            /// </param>
            public static Provider Get(this IProviders operations, string resourceProviderNamespace, string expand = default(string))
            {
                return operations.GetAsync(resourceProviderNamespace, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified resource provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='expand'>
            /// The $expand query parameter. For example, to include property aliases in
            /// response, use $expand=resourceTypes/aliases.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Provider> GetAsync(this IProviders operations, string resourceProviderNamespace, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceProviderNamespace, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
